---
title: "Structured intelligence governance template"
subtitle: "Structured intelligence systems understood by arrowkeepers"
format: 
  html:
    theme: cosmo
    toc: true
    toc-location: left
    code-fold: true
    grid:
      sidebar-width: 300px
      body-width: 900px
      margin-width: 200px
execute:
    warning: false    
    message: false    
---

- [**Blog post**](https://softloud.github.io/good-enough/blog/2025-10-02-sig-analysis.html) - *Arrowkeepers, assemble! Designing data systems that care about people* 

## Understanding the system in terms of roles

Points to where in the picture the system hurt people.

```{python}

from scripts.classes.sig_graph import SigDat

sig_dat = SigDat()


```

but ugh fiddly in object oriented, load into R to play

```{python}
# write data from python to R
sig_dat.edges_df.to_csv('local-data/edges.csv')
sig_dat.nodes_df.to_csv('local-data/nodes.csv')

```

```{r}
library(tidyverse)
edges_df <- read_csv("local-data/edges.csv") |> select(-"...1")
nodes_df <- read_csv("local-data/nodes.csv") |> select(-"...1")

head(edges_df)
head(nodes_df)


```

## system overview

## workflow

```{r}
#| fig-height: 18
#| fig-width: 12

library(ggraph)
library(tidygraph)

edges_df %>%
  select(from, to, to_minimum_requirements, arrowkeeper, status) %>%
  as_tbl_graph() %>%
  activate("nodes") %>%
  left_join(nodes_df, by = c("name" = "node")) %>%
  ggraph() +
  geom_node_point(aes(shape = role_context),
    size = 20, alpha = 0.1
  ) +
  geom_node_text(aes(label = name)) +
  geom_edge_link(
    aes(linetype = arrowkeeper, color = status)
  ) +
  theme_minimal() +
  theme(
    panel.grid = element_blank(),
    axis.ticks = element_blank(),
    axis.text = element_blank(),
    legend.position = "top",
    legend.direction = "vertical"
  ) +
  labs(
    title = "Structured intelligence governance",
    subtitle = "Roles and contexts",
    x = "",
    y = ""
  )


```

## relationships

```{r}
#| fig-height: 18
#| fig-width: 12

library(ggraph)
library(tidygraph)


edges_df %>%
  select(from, to, to_minimum_requirements, arrowkeeper, status) %>%
  as_tbl_graph() %>%
  activate("nodes") %>%
  left_join(nodes_df, by = c("name" = "node")) %>%
  ggraph(layout = "linear", circular = TRUE) +
  geom_node_point(aes(shape = role_context),
    size = 20, alpha = 0.1
  ) +
  geom_node_text(aes(label = name), size = 10) +
  geom_edge_arc(
    aes(linetype = arrowkeeper, color = status)
  ) +
  theme_minimal() +
  theme(
    panel.grid = element_blank(),
    axis.ticks = element_blank(),
    axis.text = element_blank(),
    legend.position = "top",
    legend.direction = "vertical"
  ) +
  labs(
    title = "Structured intelligence governance",
    subtitle = "Roles and contexts",
    x = "",
    y = ""
  )


```



# Minimum requirements to fulfill 

## for analytics

```{r}
library(gt)

edges_df %>%
  filter(arrowkeeper == "analytics", status != "operational") %>%
  select(-arrowkeeper) %>%
  gt()

```

## for scientists

```{r}

edges_df %>%
  filter(arrowkeeper == "scientists", status != "operational") %>%
  select(-arrowkeeper) %>%
  gt()

```

## for decision makers

```{r}

edges_df %>%
  filter(arrowkeeper == "deciders", status != "operational") %>%
  select(-arrowkeeper) %>%
  gt()

```

## for field

```{r}

edges_df %>%
  filter(arrowkeeper == "field", status != "operational") %>%
  select(-arrowkeeper) %>%
  gt()


```

# tests

## test data

```{python}
from scripts.classes.sig_dat import SigDat

sig_dat = SigDat()



```

```{python}

print(SigDat.__doc__)

```
```{python}

sig_dat.__dict__

```


```{python}
sig_dat.edges_df

```


## test graph

```{python}
from scripts.classes.sig_graph import SigGraph

sig_graph = SigGraph()


```



## test vis


```{python}
from scripts.classes.sig_vis import SigVis

sig_vis = SigVis()



```



```{python}
sig_vis.plot_role_contexts()

```



```{python}
sig_vis.table_min_req()
```