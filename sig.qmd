---
title: "Structured intelligence governance"
subtitle: "Structured intelligence systems understood by arrowkeepers"
format: 
  revealjs
---

## Set data source

Data source set to: 

```{python, python_parameters}
#| tags: [parameters]

data_source="template"
print(data_source)

```


## Where does it hurt?

> Point at the picture where the data system hurt people.

```{python}

from scripts.classes.sig_graph import SigDat

# sig_dat = SigDat(data_source="template")
sig_dat = SigDat(data_source=data_source)

```

---

## Example SIG

---

![](img/sis-template.png)

## Known universe

- arrows that have agreed-upon mandates (minimum reequirements)

```{python}

# but ugh graphs fiddly in object oriented, load into R to play

# write data from python to R
sig_dat.edges_df.to_csv('local-data/edges.csv')
sig_dat.nodes_df.to_csv('local-data/nodes.csv')

```

```{r}
library(tidyverse)
edges_df <- read_csv("local-data/edges.csv") |> select(-"...1")
nodes_df <- read_csv("local-data/nodes.csv") |> select(-"...1")

# head(edges_df)
# head(nodes_df)

```

```{r}
# wrangle into graph data for R

library(ggraph)
library(tidygraph)

plot_graph <- edges_df %>%
  select(from, to, to_minimum_requirements, arrowkeeper, status) %>%
  as_tbl_graph() %>%
  activate("nodes") %>%
  left_join(nodes_df, by = c("name" = "node")) %>%
  mutate(
    object = if_else(node_context == "humans", node_context, "not human")
  )

```

# system overview

## {.stretch}

```{r}
#| fig-width: 12
#| fig-height: 8


plot_graph %>%
  ggraph() +
  geom_edge_fan(
    aes(linetype = arrowkeeper, color = status),
    alpha = 0.8
  ) +
  geom_node_point(aes(shape = object),
    size = 20, alpha = 0.1
  ) +
  geom_node_text(aes(label = name)) +
  theme_minimal(
    base_size = 15
  ) +
  theme(
    panel.grid = element_blank(),
    axis.ticks = element_blank(),
    axis.text = element_blank()
  ) +
  labs(
    title = "Structured intelligence governance",
    subtitle = "Roles and contexts",
    x = "",
    y = ""
  )


```


## {.stretch}

```{r}
#| fig-width: 12
#| fig-height: 8

set_aggregation <- function(node) {
  if (node %in% nodes_df$node_context) {
    node_context <- node
  } else {
    node_context <- nodes_df$node_context[nodes_df$node == node]
  }

  return(node_context)
}

node_context_nodes <- nodes_df %>%
  select(node = node_context) %>%
  distinct() %>%
  mutate(node_context = node)

aggregate_nodes <- nodes_df %>%
  full_join(node_context_nodes, by = c("node", "node_context"))


core_contexts_graph <- edges_df %>%
  mutate(
    # replace anything that's not in node_contexts with it
    # reduces to node_context unique values
    from = map_chr(from, set_aggregation),
    to = map_chr(to, set_aggregation)
  ) %>%
  as_tbl_graph() %>%
  activate("nodes") %>%
  left_join(aggregate_nodes, by = c("name" = "node")) %>%
  mutate(
    object = if_else(node_context == "humans", node_context, "not human")
  )


core_contexts_graph %>%
  ggraph(circular = TRUE) +
  geom_edge_fan(
    aes(linetype = arrowkeeper, color = status),
    alpha = 0.8
  ) +
  geom_node_point(
    aes(shape = object),
    size = 20,
    alpha = 0.1
  ) +
  geom_node_text(aes(label = name)) +
  theme_minimal(
    base_size = 15
  ) +
  theme(
    panel.grid = element_blank(),
    axis.ticks = element_blank(),
    axis.text = element_blank()
  ) +
  labs(
    title = "Structured intelligence governance",
    subtitle = "Dimension reducded to node contexts",
    x = "",
    y = ""
  )


```


# Minimum requirements to fulfill 

## for analytics

```{r}
library(gt)

edges_df %>%
  filter(arrowkeeper == "analytics", status != "operational") %>%
  select(-arrowkeeper) %>%
  gt()

```

## for scientists

```{r}

edges_df %>%
  filter(arrowkeeper == "scientists", status != "operational") %>%
  select(-arrowkeeper) %>%
  gt()

```

## for decision makers

```{r}

edges_df %>%
  filter(arrowkeeper == "deciders", status != "operational") %>%
  select(-arrowkeeper) %>%
  gt()

```

## for field

```{r}

edges_df %>%
  filter(arrowkeeper == "field", status != "operational") %>%
  select(-arrowkeeper) %>%
  gt()


```


## {.stretch}

```{r}
#| fig-width: 12
#| fig-height: 8

library(ggraph)
library(tidygraph)


plot_graph %>%
  as_tbl_graph() %>%
  activate("nodes") %>%
  left_join(nodes_df, by = c("name" = "node")) %>%
  ggraph(layout = "linear", circular = TRUE) +
  geom_node_point(aes(shape = object),
    size = 20, alpha = 0.1
  ) +
  geom_node_text(aes(label = name)) +
  geom_edge_arc(
    aes(linetype = arrowkeeper, color = status)
  ) +
  theme_minimal(
    base_size = 15
  ) +
  theme(
    panel.grid = element_blank(),
    axis.ticks = element_blank(),
    axis.text = element_blank()
  ) +
  labs(
    title = "Structured intelligence governance",
    subtitle = "Relationships",
    x = "",
    y = ""
  )


```
